#ifndef MATH_GENERAL_H
#define MATH_GENERAL_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Config.h>
#include <math.h>

////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////
#ifndef MATH_PI
#define MATH_PI			3.14159265358979323846f
#endif

#ifndef MATH_EPSILON
#define MATH_EPSILON	0.0000001f
#endif

#ifndef MATH_RADIAN
#define MATH_RADIAN		3.14159265358979323846f / 180.0f
#endif

////////////////////////////////////////////////////////////
// Default macros
////////////////////////////////////////////////////////////
#define sqr(x)		((x) * (x))

#ifndef max
	#define max(a,b)	((a) > (b) ? (a) : (b))
#endif

#ifndef min
	#define min(a,b)	((a) < (b) ? (a) : (b))
#endif

#define degtorad(a)	(((a) * MATH_PI) / 180.0f)
#define radtodeg(a)	(((a) * 180.0f) / MATH_PI)

////////////////////////////////////////////////////////////
// Methods
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// Initialize the library
////////////////////////////////////////////////////////////
void MathInitialize();

////////////////////////////////////////////////////////////
/// Sinus function
////////////////////////////////////////////////////////////
float MathSin(float Radians);

////////////////////////////////////////////////////////////
/// Cosinus function
////////////////////////////////////////////////////////////
float MathCos(float Radians);

////////////////////////////////////////////////////////////
/// Square root function
////////////////////////////////////////////////////////////
float (*MathSqrt)(float Value);

////////////////////////////////////////////////////////////
/// Calculate the next power of two
////////////////////////////////////////////////////////////
UInt32 MathPowerOfTwo(UInt32 Value);

////////////////////////////////////////////////////////////
/// Determines if two floating-point are close enough
/// together that they can be considered equal
////////////////////////////////////////////////////////////
bool MathCloseEnough(float f1, float f2);

////////////////////////////////////////////////////////////
/// Returns a gradual transition of 'x' from 0 to 1 beginning at
/// threshold 'a' and ending at threshold 'b'
///
/// References:
///  [1] http://www.rendermanacademy.com/docs/smoothstep.htm
///  [2] http://www.brlcad.org/doxygen/d8/d33/noise_8c-source.html
///  [3] Natalya Tatarchuk, "Efficient High-Level Shader Development",
///      Game Developers Conference Europe, August 2003
////////////////////////////////////////////////////////////
float MathSmoothStep(float a, float b, float x);

////////////////////////////////////////////////////////////
/// Determines if a number is in the range [Min Max]
////////////////////////////////////////////////////////////
bool MathCheckBounds(Int32 * Value, Int32 Min, Int32 Max);

#endif // MATH_GENERAL_H
