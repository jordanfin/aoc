#ifndef	MATH_GEOMETRY_BOUNDINGBOX_H
#define MATH_GEOMETRY_BOUNDINGBOX_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Config.h>
#include <Math/Geometry/Vector.h>

////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////
#define BOUNDING_BOX_OUTSIDE	0x00
#define BOUNDING_BOX_INSIDE		0x01
#define BOUNDING_BOX_OVERLAP	0x02

////////////////////////////////////////////////////////////
// Member data
////////////////////////////////////////////////////////////
struct BoundingBox
{
	struct Vector3f Bounds[2];	///< AABB bounds [min, max]
	struct Vector3f Center;		///< AABB center position
};

////////////////////////////////////////////////////////////
// Member data
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// Create a bounding box
////////////////////////////////////////////////////////////
struct BoundingBox * BoundingBoxCreate();

////////////////////////////////////////////////////////////
/// Destroy a bounding box
////////////////////////////////////////////////////////////
void BoundingBoxDestroy(struct BoundingBox * Box);

////////////////////////////////////////////////////////////
/// Set the data of a bounding box
////////////////////////////////////////////////////////////
void BoundingBoxSet(struct BoundingBox * Box, struct Vector3f * Min, struct Vector3f * Max);

////////////////////////////////////////////////////////////
/// Update the center of the bounding box
////////////////////////////////////////////////////////////
void BoundingBoxUpdateCenter(struct BoundingBox * Box);

////////////////////////////////////////////////////////////
/// Create a bounding box from a list of vertices
////////////////////////////////////////////////////////////
void BoundingBoxGenerate(struct BoundingBox * Box, struct Vector3f * VertList, UInt32 Size);

////////////////////////////////////////////////////////////
/// Distance squared to a point from the box (arvos algorithm)
////////////////////////////////////////////////////////////
float BoundingBoxDistanceSquared(struct BoundingBox * Box, struct Vector3f * Point);

////////////////////////////////////////////////////////////
/// Distance to a point from the box
////////////////////////////////////////////////////////////
float BoundingBoxDistance(struct BoundingBox * Box, struct Vector3f * Point);

////////////////////////////////////////////////////////////
/// Check if a bounding box is colliding with a sphere (qri algorithm)
////////////////////////////////////////////////////////////
UInt32 BoundingBoxCollisionSphere(struct BoundingBox * Box, struct Vector3f * Sphere, float Radius);

////////////////////////////////////////////////////////////
/// Longest axis of the bounding box
////////////////////////////////////////////////////////////
UInt32 BoundingBoxLongestAxis(struct BoundingBox * Box, float * Distance);

////////////////////////////////////////////////////////////
/// Shortest axis of the bounding box
////////////////////////////////////////////////////////////
UInt32 BoundingBoxShortestAxis(struct BoundingBox * Box, float * Distance);

////////////////////////////////////////////////////////////
/// Return the distance of an axis of the bounding box
////////////////////////////////////////////////////////////
float BoundingBoxAxisDistance(struct BoundingBox * Box, UInt32 Axis);

#endif // MATH_GEOMETRY_BOUNDINGBOX_H