#ifndef SYSTEM_STRING_LEXER_H
#define SYSTEM_STRING_LEXER_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Config.h>
#include <stdio.h>
#include <System/String/bstrlib.h>

////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////
#define LEXER_ERROR			0x00
#define LEXER_OK			0x01
#define LEXER_EOF			0x02

#define LEXER_UPPER			"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#define LEXER_LOWER			"abcdefghijklmnopqrstuvwxyz"
#define LEXER_DIGIT			"0123456789"
#define LEXER_BLANK			"\t\n\r "
#define LEXER_SEPARATOR		"\t "
#define LEXER_ALPHA			LEXER_UPPER LEXER_LOWER
#define LEXER_ALPHANUMERIC	LEXER_UPPER LEXER_LOWER LEXER_DIGIT

////////////////////////////////////////////////////////////
// Data structure
////////////////////////////////////////////////////////////
struct Lexer
{
	FILE *	Input;				///< Input file
	int		Current;			///< Current character
	bool	HasCurrent;			///< Check if current has a preread character
	bstring Item;				///< Token being read
	bool	OwnItem;			///< Check if the Lexer owns the item reference
	bool	Started, Off;		///< State indicators
};

////////////////////////////////////////////////////////////
/// Lexer initializer (the FILE have to be opened)
////////////////////////////////////////////////////////////
struct Lexer * LexerCreate(FILE * File);

////////////////////////////////////////////////////////////
/// Lexer destructor (it doesn't close the file)
////////////////////////////////////////////////////////////
void LexerDestroy(struct Lexer * LexPtr);

////////////////////////////////////////////////////////////
// Consultants
//
// TODO: side-effect free
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// Returns the last string read by the lexer (the bstring
/// have to be released)
////////////////////////////////////////////////////////////
bstring LexerItemGet(struct Lexer * LexPtr);

////////////////////////////////////////////////////////////
/// Check if the lexer began to read a file
////////////////////////////////////////////////////////////
bool LexerStarted(const struct Lexer * LexPtr);

////////////////////////////////////////////////////////////
/// Check if the lexer finished to read a file
////////////////////////////////////////////////////////////
bool LexerOff(const struct Lexer * LexPtr);

////////////////////////////////////////////////////////////
// Operators
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
///	Reads as many characters as possible belonging to Charset
////////////////////////////////////////////////////////////
void LexerNext(struct Lexer * LexPtr, const char * Charset);

////////////////////////////////////////////////////////////
///	Reads as many characters as possible not belonging to Charset
////////////////////////////////////////////////////////////
void LexerNextTo(struct Lexer * LexPtr, const char * Charset);

////////////////////////////////////////////////////////////
///	Reads one character belonging to Charset
////////////////////////////////////////////////////////////
void LexerNextChar(struct Lexer * LexPtr, const char * Charset);

////////////////////////////////////////////////////////////
/// Skip until the end of line
////////////////////////////////////////////////////////////
UInt32 LexerNextLine(struct Lexer * LexPtr);

////////////////////////////////////////////////////////////
///	Reads as many characters as possible belonging to
/// Charset (the read characters are lost)
////////////////////////////////////////////////////////////
void LexerSkip(struct Lexer * LexPtr, const char * Charset);

////////////////////////////////////////////////////////////
///	Reads as many characters as possible not belonging to
/// Charset (the read characters are lost)
////////////////////////////////////////////////////////////
void LexerSkipTo(struct Lexer * LexPtr, const char * Charset);

#endif // SYSTEM_STRING_LEXER_H
