#ifndef TERRAIN_TERRAIN_H
#define TERRAIN_TERRAIN_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Config.h>
#include <Math/Geometry/Vector.h>

////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////
#define TERRAIN_NORMALIZATION_FACTOR	15.0f

#define TERRAIN_TEXTURE_REPEAT			0x08
#define TERRAIN_MULTITEXTURE_LAYERS		0x03

#define TERRAIN_ENTITY_NONE				0x00
#define TERRAIN_ENTITY_CHARACTER		0x01
#define TERRAIN_ENTITY_OBJECT			0x02
#define TERRAIN_ENTITY_BLOCK			0x03
#define TERRAIN_ENTITY_PARTICLE			0x04

#define TERRAIN_LOAD_DEFAULT			0x00	///< Terrain loader
#define TERRAIN_LOAD_TEXTURE			0x01
#define TERRAIN_LOAD_FILE				0x02

////////////////////////////////////////////////////////////
// Member data
////////////////////////////////////////////////////////////
struct VertexType
{
	struct Vector3f Position;	///< (x, y, z) position
	struct Vector2f Texture;	///< (tu, tv) texture coordinates
	struct Vector3f Normal;		///< (nx, ny, nz) normal
};

struct TerrainType
{
	// struct Texture *		Atlas;
	struct VertexType *		HeightMap;
	struct VertexType *		Vertices;
	UInt32					VertexCount;
	UInt32					Width, Height;
	bool					ComputedNormals;
	struct CameraType *		Camera;

	struct glVector4f		AmbientLight;
	struct glVector4f		LightColor;
	struct glVector4f		LightPos;
};

////////////////////////////////////////////////////////////
/// Create the terrain
////////////////////////////////////////////////////////////
struct TerrainType * TerrainCreate();

////////////////////////////////////////////////////////////
/// Initialize
////////////////////////////////////////////////////////////
bool TerrainInitialize(struct TerrainType * Terrain, UInt32 Method, UInt32 Width, UInt32 Height, char * Path);

////////////////////////////////////////////////////////////
/// Destroy the terrain
////////////////////////////////////////////////////////////
bool TerrainDestroy(struct TerrainType * Terrain);

////////////////////////////////////////////////////////////
/// Load a terrain by the specified method
////////////////////////////////////////////////////////////
bool TerrainLoad(struct TerrainType * Terrain, UInt32 Method, UInt32 Width, UInt32 Height, char * Path);

////////////////////////////////////////////////////////////
/// Generate a default mesh
////////////////////////////////////////////////////////////
bool TerrainHeightMapGenerate(struct TerrainType * Terrain, UInt32 Width, UInt32 Height);

////////////////////////////////////////////////////////////
/// Load a height map from a file
////////////////////////////////////////////////////////////
bool TerrainHeightMapLoadFile(struct TerrainType * Terrain, char * Path);

////////////////////////////////////////////////////////////
/// Load a terrain by the specified method
////////////////////////////////////////////////////////////
bool TerrainHeightMapLoadTexture(struct TerrainType * Terrain, char * Path);

////////////////////////////////////////////////////////////
/// Normalize the vertices of the height map
////////////////////////////////////////////////////////////
void TerrainHeightMapNormalize(struct TerrainType * Terrain);

////////////////////////////////////////////////////////////
/// Calculate the normals of the height map
////////////////////////////////////////////////////////////
bool TerrainCalculateNormals(struct TerrainType * Terrain);

////////////////////////////////////////////////////////////
/// Load the texture atlas for the terrain
////////////////////////////////////////////////////////////
bool TerrainTextureLoad(struct TerrainType * Terrain, char * Path);

////////////////////////////////////////////////////////////
/// Calculate the texture coordinates from the atlas
////////////////////////////////////////////////////////////
void TerrainCalculateTextureCoordinates(struct TerrainType * Terrain);

////////////////////////////////////////////////////////////
/// Generate the buffers from the terrain vertices
////////////////////////////////////////////////////////////
bool TerrainGenerateBuffers(struct TerrainType * Terrain);

////////////////////////////////////////////////////////////
/// Set the height of the specified position in the terrain
////////////////////////////////////////////////////////////
void TerrainSetHeight(struct TerrainType * Terrain, UInt32 x, UInt32 y, float Height);

////////////////////////////////////////////////////////////
/// Get the height of the specified position in the terrain
////////////////////////////////////////////////////////////
float TerrainGetHeight(struct TerrainType * Terrain, UInt32 x, UInt32 y);

////////////////////////////////////////////////////////////
/// Returns the approximate height of the terrain at
// the specified (x, z) position
////////////////////////////////////////////////////////////
float TerrainGetHeightAt(struct TerrainType * Terrain, UInt32 x, UInt32 z);

void TerrainUpdateCameraAngle(struct TerrainType * Terrain, struct Event * Evt, float Degrees);

void TerrainUpdateMovement(struct TerrainType * Terrain, struct Event * Evt, float Distance);

void TerrainRenderTest(struct TerrainType * Terrain);

#endif // TERRAIN_TERRAIN_H