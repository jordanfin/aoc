#ifndef GRAPHICS_TEXTURE_H
#define GRAPHICS_TEXTURE_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Config.h>
#include <Graphics/Color.h>
#include <Math/Geometry/Rect.h>

////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////
#define TEXTURE_SCREENSHOT_SIZE	0xFFFF	///< Max size of screenshots

////////////////////////////////////////////////////////////
// Member data
////////////////////////////////////////////////////////////
struct Texture
{
    UInt32			Width;				///< Image width
    UInt32			Height;				///< Image Height
    UInt32			TextureWidth;		///< Actual texture width (can be greater than image width because of padding)
    UInt32			TextureHeight;		///< Actual texture height (can be greater than image height because of padding)
    UInt32			TextureID;			///< Internal texture ID
    struct Color4ub *Pixels;			///< Pixels of the image
};

////////////////////////////////////////////////////////////
/// Update correct size from GL_ARB
////////////////////////////////////////////////////////////
UInt32 TextureValidSize(UInt32 Size);

////////////////////////////////////////////////////////////
/// Create 2D texture with loaded data
////////////////////////////////////////////////////////////
bool TextureCreate(struct Texture * TextureData, bool Mipmap, bool ColorKey);

////////////////////////////////////////////////////////////
/// Bind 2D texture with previous cache
////////////////////////////////////////////////////////////
void TextureBind(struct Texture * TextureData);

////////////////////////////////////////////////////////////
/// Render a static 2D texture with triangle strip
////////////////////////////////////////////////////////////
void TextureRenderEx(struct Texture * TextureData, Int32 X, Int32 Y, struct Rect * RectData, struct Color4ub * Color);

////////////////////////////////////////////////////////////
/// Delete the texture from memory and OpenGL
////////////////////////////////////////////////////////////
void TextureDelete(struct Texture * TextureData);

////////////////////////////////////////////////////////////
/// Save texture from pixels as a bmp
///
/// \return true if saving was successful
///
////////////////////////////////////////////////////////////
bool TextureSave( char * Filename, Int32 Width, Int32 Height, Int32 Channels, UInt8 * Data );

////////////////////////////////////////////////////////////
/// Take a screenshot
///
////////////////////////////////////////////////////////////
void TextureScreenShot(Int32 Width, Int32 Height);

#endif // GRAPHICS_TEXTURE_H
